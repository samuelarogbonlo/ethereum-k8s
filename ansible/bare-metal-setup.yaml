---
# Ansible Playbook for setting up a bare metal server for Ethereum node deployment
# This playbook handles system preparation, Kubernetes installation, and optimizations
# Run with: ansible-playbook -i inventory bare-metal-setup.yaml

- name: Provision Bare Metal for Ethereum Node
  hosts: ethereum_nodes
  become: true
  vars:
    kubernetes_version: "1.24.0"
    container_runtime: "containerd"
    data_directory: "/mnt/ethereum"
    hostname: "ethereum-node-{{inventory_hostname}}"
    ssd_device: "/dev/nvme0n1"  # Update with your actual device
    network_interface: "eth0"    # Update with your actual interface

  tasks:
    # Basic System Setup
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install basic tools
      package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - python3-pip
          - net-tools
          - ntp
          - htop
          - iotop
          - iftop
          - vim
          - chrony
          - nfs-common
        state: present
      when: ansible_os_family == "Debian"

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"

    # System Optimizations
    - name: Create sysctl configuration file for Ethereum node
      copy:
        dest: /etc/sysctl.d/99-ethereum-node.conf
        content: |
          # Network optimizations for Ethereum P2P
          net.core.somaxconn=65535
          net.core.netdev_max_backlog=50000
          net.ipv4.tcp_max_syn_backlog=30000
          net.ipv4.tcp_slow_start_after_idle=0
          net.ipv4.tcp_fin_timeout=15
          net.ipv4.tcp_keepalive_time=300
          net.ipv4.tcp_keepalive_probes=5
          net.ipv4.tcp_keepalive_intvl=15

          # File system optimizations
          fs.file-max=1000000
          fs.nr_open=1000000

          # Virtual memory optimizations
          vm.swappiness=1
          vm.dirty_ratio=80
          vm.dirty_background_ratio=5
          vm.dirty_expire_centisecs=12000

    - name: Apply sysctl settings
      command: sysctl -p /etc/sysctl.d/99-ethereum-node.conf

    - name: Increase open file limits
      copy:
        dest: /etc/security/limits.d/ethereum-node.conf
        content: |
          * soft nofile 1048576
          * hard nofile 1048576
          * soft nproc 1048576
          * hard nproc 1048576
          root soft nofile 1048576
          root hard nofile 1048576
          root soft nproc 1048576
          root hard nproc 1048576

    # Configure Storage for Ethereum Data
    - name: Install XFS filesystem tools
      package:
        name: xfsprogs
        state: present

    - name: Check if device is already formatted
      command: blkid -s TYPE -o value {{ ssd_device }}
      register: device_fs
      failed_when: false
      changed_when: false

    - name: Format SSD with XFS if not already formatted
      command: mkfs.xfs -f {{ ssd_device }}
      when: device_fs.stdout != "xfs"

    - name: Create mount directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ data_directory }}"
        - "{{ data_directory }}/geth"
        - "{{ data_directory }}/lighthouse"
        - "{{ data_directory }}/prometheus"
        - "{{ data_directory }}/grafana"

    - name: Add mount to fstab
      mount:
        path: "{{ data_directory }}"
        src: "{{ ssd_device }}"
        fstype: xfs
        opts: defaults,noatime,nodiratime,discard
        state: mounted

    # Network Optimizations for Ethereum P2P
    - name: Configure jumbo frames on network interface
      command: ip link set {{ network_interface }} mtu 9000
      when: network_interface is defined

    - name: Make jumbo frames persistent
      lineinfile:
        path: /etc/network/interfaces.d/{{ network_interface }}
        line: "post-up ip link set {{ network_interface }} mtu 9000"
        create: yes
      when:
        - network_interface is defined
        - ansible_os_family == "Debian"

    # Firewall Configuration
    - name: Install UFW
      package:
        name: ufw
        state: present
      when: ansible_os_family == "Debian"

    - name: Configure UFW for Ethereum node
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: "{{ 'tcp' if item not in ['30303', '30304', '9000'] else 'any' }}"
      with_items:
        - "22"      # SSH
        - "30303"   # Ethereum P2P (both TCP/UDP)
        - "9000"    # Lighthouse P2P (both TCP/UDP)
        - "8545"    # Ethereum RPC
        - "8546"    # Ethereum WebSocket
        - "30545"   # Kubernetes NodePort for RPC
        - "30546"   # Kubernetes NodePort for WebSocket
        - "30300"   # Grafana
        - "30909"   # Prometheus
      when: ansible_os_family == "Debian"

    - name: Enable UFW
      ufw:
        state: enabled
      when: ansible_os_family == "Debian"

    # Install Docker and Containerd
    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Install containerd
      package:
        name: containerd.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Configure containerd
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Create default containerd config
      command: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Configure containerd to use systemd cgroup driver
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        state: present

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    # Install Kubernetes Components
    - name: Add Kubernetes GPG apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Kubernetes components
      package:
        name:
          - kubelet={{ kubernetes_version }}-00
          - kubeadm={{ kubernetes_version }}-00
          - kubectl={{ kubernetes_version }}-00
        state: present
      when: ansible_os_family == "Debian"

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == "Debian"

    - name: Enable kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes

    # Disable swap (required for Kubernetes)
    - name: Disable swap
      command: swapoff -a

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*\sswap\s+.*)$'
        replace: '# \1'

    # Initialize Kubernetes Cluster
    - name: Initialize Kubernetes cluster
      command: >
        kubeadm init
        --pod-network-cidr=10.244.0.0/16
        --cri-socket=unix:///var/run/containerd/containerd.sock
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: '0700'

    - name: Copy Kubernetes config for root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'

    - name: Create non-root user .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy Kubernetes config for non-root user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    # Install Flannel CNI
    - name: Install Flannel CNI
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

    # Allow scheduling on master node (for single node setup)
    - name: Untaint master node
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-
      failed_when: false

    # Set up Kubernetes local storage provisioner
    - name: Create local storage class
      command: |
        kubectl apply -f - <<EOF
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: local-storage
        provisioner: kubernetes.io/no-provisioner
        volumeBindingMode: WaitForFirstConsumer
        EOF

    # Install NUMA tools for CPU pinning
    - name: Install NUMA tools
      package:
        name:
          - numactl
          - hwloc
          - cpuset
        state: present

    # Set up chrony for time synchronization
    - name: Configure chronyd for accurate timekeeping
      copy:
        dest: /etc/chrony/chrony.conf
        content: |
          # Use specific NTP servers for better precision
          server 0.pool.ntp.org iburst
          server 1.pool.ntp.org iburst
          server 2.pool.ntp.org iburst
          server 3.pool.ntp.org iburst

          # Record the rate at which the system clock gains/losses time
          driftfile /var/lib/chrony/drift

          # Allow the system clock to be stepped in the first three updates
          makestep 1.0 3

          # Enable kernel synchronization
          rtcsync

          # Serve time locally
          local stratum 10

          # Specify log file
          logdir /var/log/chrony
      when: ansible_os_family == "Debian"

    - name: Restart chronyd
      systemd:
        name: chronyd
        state: restarted
        enabled: yes
      when: ansible_os_family == "Debian"

    # Final message
    - name: Display success message
      debug:
        msg: |
          Bare Metal Server Setup Complete!

          Kubernetes is running and ready to deploy the Ethereum node.
          Storage is configured at {{ data_directory }}
          System optimizations have been applied.

          Next step: Deploy the Ethereum node using the deployment script.